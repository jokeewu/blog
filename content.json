{"pages":[],"posts":[{"title":"parcel尝试打包多页应用","text":"如何安装及如何使用参见parcel官网。 新建文件_main.html(任意名称)作为项目的入口，将项目功能页面以如下方式引入。 12345678910111213&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- 项目功能页面 --&gt; &lt;a href=\"index.html\"&gt;&lt;/a&gt; &lt;a href=\"page1.html\"&gt;&lt;/a&gt; &lt;a href=\"page2.html\"&gt;&lt;/a&gt; &lt;!-- more --&gt;&lt;/body&gt;&lt;/html&gt; 开发本地预览 1parcel _main.html 构建打包 1parcel build _main.html 在实际开发中打包，本地开发环境搭建是比较繁琐复杂的事情。 就目前项目打包有如下需求： 本地开发预览 以上方法可实现 针对不同的环境打包，替换对应的API根路径 由于从parcel文档中可以看出还没有类似webpack DefinePlugin功能（创建一个在编译时可以配置的全局常量），目前想到的可用方法，采用字符串替换（通过gulp-replace）。 打包成zip压缩包，便于部署 针对此项需求采用gulp/gulp-zip实现 综上，对于简单项目的确可以达到零配置。但对于稍复杂项目还是显得有点不足。","link":"/2018/04/17/parcel尝试打包多页应用/"},{"title":"Jenkins+Github持续集成","text":"源于对现在部署方案的不满。 环境准备 Github账号及测试项目 网络服务器一台，用于Github通过Webhooks调用通知 网络服务器需安装Node,Git,Jenkins 配置Github项目WebhooksStep1: Github进入项目 &gt; Settings Step2: 选择Webhooks 其中Secret来源于Jenkins系统，用户 &gt; [具体用户] &gt; 设置 &gt; API Token 配置JenkinsStep1: 安装Generic Webhook Trigger插件 系统管理 &gt; 管理插件 &gt; 可选插件 &gt; [输入Generic Webhook Trigger]安装 Step2: 新建任务 新建任务 任务配置 Step1: 基础信息/项目类型 Step2: 源码管理工具 Step3: 触发器配置 Step4: 构建过程脚本命令配置 Step5: 构建邮件通知 Step6: 测试成功","link":"/2018/04/18/Jenkins+Github持续集成/"},{"title":"webpack打包多页应用","text":"","link":"/2018/04/23/webpack打包多页应用/"},{"title":"前端开发笔记(持续更新)","text":"注：本文用于帮助记忆前端开发遇到的问题及解决方法/方案。为持续更新文章 字体平滑1234#app { -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale;} IOS下普通元素绑定点击事件无效123.js-click { cursor: pointer;} Safari下input[type=”number”]提示”输入有效值”当输入小数时，需指定step属性 1&lt;input type=\"number\" step=\"0.01\"/&gt;","link":"/2018/04/18/前端开发笔记/"},{"title":"优秀集锦","text":"优秀Github账户 mqyqingfeng JavaScript基础 undefined与null的区别","link":"/2018/05/21/优秀集锦/"},{"title":"原型与原型链","text":"一张图看清JavaScript原型脉络: 留个问题： 12Function.prototype === Function.__proto__ // trueObject.__proto__ === Function.prototype // true 以上代码如何解释?","link":"/2018/05/23/原型与原型链/"},{"title":"前端规范","text":"对于不同的企业有不同的前端（代码/文件目录/打包发布）规范，其下为个人习得或习惯。 代码规范HTML文档统一采用UTF-8编写(设置IDE)代码缩进采用4个空格一个标签多个属性(导致折行)，每个属性单独成行123456789&lt;div data-prop1=\"1\" data-prop2=\"2\" data-prop3=\"3\" data-prop4=\"4\" ...&gt; &lt;!-- ... --&gt;&lt;/div&gt; 注释的使用 用于模块开始和结束 123&lt;!-- 模块名 --&gt;&lt;div class=\"module\"&gt;&lt;/div&gt;&lt;!-- /模块名 --&gt; 用于说明 12&lt;!-- 这是一个组件 --&gt;&lt;div class=\"component\"&gt;&lt;/div&gt; 暂存代码（可能下次需要） 外链样式文件放在head标签之中, 外链JS文件放在body结束标签之前123456789&lt;!-- ... --&gt;&lt;head&gt;&lt;link href=\"./style.css\" rel=\"stylesheet\"&gt;&lt;/head&gt;&lt;body&gt;&lt;!-- ... --&gt;&lt;script src=\"./index.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;!-- ... --&gt; 使用标签语意化123&lt;header&gt;&lt;/header&gt;&lt;footer&gt;&lt;/footer&gt;&lt;!-- ... --&gt; 标签正确嵌套 两个标签不能交叉嵌套 1234// Error&lt;span&gt; &lt;div&gt;&lt;/span&gt;&lt;/div&gt; 一般情况下，行内元素不能嵌套块级元素 1234// BAD&lt;span&gt; &lt;div&gt;&lt;/div&gt;&lt;/span&gt; 遵照HTML5声明文档类型1&lt;!DOCTYPE html&gt; 元信息设置12345&lt;meta charset=\"UTF-8\"&gt;&lt;!-- 根据实际情况调整 --&gt;&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;&lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt;&lt;!-- 其他有利于SEO信息，如: keywords,description等 --&gt; 标签及属性名均采用小写，且属性值采用双引号(“”)，自定义属性以data-开头1234&lt;div class=\"module\" data-prop-name=\"&lt;propName&gt;\"&gt;&lt;/div&gt; CSS/LESS/SASS等css代码位置一般情况下css代码放置于单独文件，外部链接进html文件，特殊情况（页面简单等）下也可将其放入style标签，正常情况下不应在标签上设置样式。在css中不使用@import，除开LESS/SASS文件中。 样式的写法本人一般采用OO结合BEM的写法，OO定义基本的原子类，便于组合，BEM具有一定的模块化封装性。 id与class定义 id采用驼峰形式，如：#fullName class采用小写字母加中划线（-）或下划线（_）,详情说明参考BEM，如：.btn--primary, .user__avatar--small JS中使用class，以js-开头 样式属性顺序:尺寸-&gt;形状-&gt;内填充/外边距-&gt;文字-&gt;位置等（不严格按照这顺序）注释 大的模块/分段 12345678910/** * ================================== * 模块名称, 如：原子类/重置类等 * 描述信息 * ================================== */ .mb15 { margin-bottom: 15px; } 样式属性说明 12345/* 说明 */.className { /* 说明 */ color: #ff0000;} 属性值缩写，如：颜色，font，background等样式换行 不同属性单独成行 12345678/* 不推荐 */.className {font-size: 12px;color: #ff0000;}/* 推荐 */.className { font-size: 14px; color: #ff0000;} 多个class共同样式，不同类名单独成行 123456789/* 不推荐 */.className1,.className2 { /* ... */}/* 推荐 */.className1,.className2 { /* ... */} JavaScript基础规范使用es6+相关语法，同时polyfill，最后采用babel转码。 变量定义 123456789101112131415// 定义变量用let，常量用const// 变量，驼峰命名法let fullName = 'Jacky';// 常量const API_ROOT = '';// 多个变量，多个letlet var1 = '';let var2 = '';// 不推荐let var1 = '', var2 = ''; 构造函数首字母大写 1234567function Person () { // ...}class Person { // ...} 空格使用 12345678910111213141516171819202122232425262728// 运算符前后加入空格let a = 1;let b = 2;let c = a + b;// 数组项之间let arr = ['item1', 'item2', 'item3'];// 对象字面量key/value间let obj = { prop1: 'prop1', prop2: 'prop2',}// 函数名与括号间，参数间，函数体左括号与参数右括号间function ask (name, content) { // ...}// 条件if (age === 20) { // ...}// 循环for (let i = 0; i &lt; 10; i++) { // ...} 采用2个空格进行代码缩进 123456789// 不推荐if (space === 4) { alert('4个空格');}// 推荐if (space === 2) { alert('2个空格');} 语句结束必须使用分号(;) 12345// 不推荐let num1 = 1// 推荐let num1 = 1; 箭头函数括号使用 1234567// 不推荐let func1 = (a, b) =&gt; a + b;let func2 = a =&gt; a + 1;// 推荐let func1 = (a, b) =&gt; (a + b);let func2 = (a) =&gt; (a + 1); 注释的使用 123456789101112131415161718192021/* 块级注释 *//** * 函数/方法注释 * @param {String} fullName * @return {String} */function sayHello (fullName) { // ...}// 行注释let internal = null; // 变量let obj = { // 属性说明 prop1: ''};/****************************** * 功能块分隔 ******************************/ 避免使用过多的全局变量 123456789// 采用命名空间(namespace)let utils = {};utils.date = {};utils.currency = {};// 采用IFFF（自执行函数）包裹代码块(function () { // ...})(); 库/框架jQuery jQuery对象变量名称以$开头 1let $fullName = $('#fullName') 多次使用的jQuery对象变量缓存 查询元素，缩小范围，减少选择器复杂度通过find 12345// 不推荐$('form input');// 推荐$('form').find('.input'); 方法链式调用 12345$('.blk') .html('hello') .css({ 'background-color': '#ff0000' }); css操作用class,不直接操作属性 123.active { color: #ff0000;} 123456// 不推荐$('.blk').css({ color: '#ff0000'});// 推荐$('.blk').addClass('active'); 绑定列表元素事件采用事件委托 123$('.list').on('click', '.list-item', function () { // ...}); 减少DOM操作，使用字符串拼接（join）,然后一次性append 12345678let $list = $('.list');let listItemStrs = [];for (let i = 0; i &lt; 10; i++) { listItemStrs.push(`&lt;li&gt;${i}&lt;/li&gt;`); // 不推荐 // $list.append(`&lt;li&gt;${i}&lt;/li&gt;`);}$list.append(listItemStrs.join('')); ajax回调采用Promise 1234567$.ajax({ ...}).then(function () { // success callback}, function () { // fail callback}); VUE参考文档 以上html规范适用于VUE组件html模版定义，JS规范适用于组件JS定义，CSS适用于组件样式定义。 用vue-cli脚手架搭建初始化项目 组件书写采用单文件 组件粒度按照实际情况调整，如：公共组件小粒度，便于复用；复用性不大的，可以大粒度。 组件名称采用小写字母加中划线（-）命名 组件props定义，需定义类型及默认值 12345678910export default { props: { max: { type: Number, default () { return 10; } } }} 合理使用computed/watch/methods，详细原因参考：计算属性和侦听器 组件的样式均采用scoped，有助于提高组件的封闭性 123&lt;style lang=\"scss\" scoped&gt;/* ... */&lt;/style&gt; React 用create-react-app作为项目的脚手架，初始化搭建项目 组件书写采用单文件 为src目录增加resolve.alias，修改webpack配置，以方便文件引用 12345678// webpack config{ resolve: { alias: { '@': path.resolve(__dirname, '../src'), } }} 采用ES6及JSX编写组件，以提高效率/可读性/可维护性 组件名及文件名采用帕斯卡命名法（首字母大写，大驼峰）形式，如:MyComponent.js 组件代码首先引入node_modules中模块，然后再引入自定义组件，其次在引入样式及图片文件 12345import React, { Component } from 'react';import { List } from 'antd';import Banner from './Banner';import styles from './style.less';// ... 使用装饰器 123@withRouterexport default class MyComponent extends Component {} 按照需要详细定义组件propTypes及defaultProps 123456789export default class MyComponent extends Component { static propTypes = { max: PropTypes.number, } static defaultProps = { max: 10, }} 组件/标签属性较多时，每条属性单独成行 合理使用组件命名空间，如：List.Item JSX用()包裹 按照生命周期组顺序织组件的方法、属性 组件中样式尽量少使用css-in-js形式，将样式提取到单独文件中 1234567891011121314151617181920212223// 不推荐// ...export default class Com extends Component { render () { const style = { backgroundColor: '#ff0000', }; return ( &lt;div style={style}&gt;&lt;/div&gt; ) }}// 推荐// ...import styles from './style.less';export default class Com extends Component { render () { return ( &lt;div className={styles.root}&gt;&lt;/div&gt; ) }} 组件中事件监听函数采用箭头函数绑定上下文 12345678910111213141516171819202122export default class Com extends Component { // 不推荐 // constructor (props) { // super(props); // this.handleClick = this.handleClick.bind(this); // } // handleCLick () { // // ... // } // 推荐 handleClick = () =&gt; { // ... } render () { return ( &lt;div onClick={this.handleClick}&gt;&lt;/div&gt; ) }} 文件目录规范SPA (单页应用) project_dir src assets images styles ... components Banner index.js utils date.js currency.js ... pages order Detail.js List.js ... index.js MPA (多页应用) project_dir src assets images styles scripts ... pages page1.js page2.js ... tpls page1.html page2.html ... ``` 打包发布基于现在情况，本公司现在打包基本上采用webpack及相关插件予以实现，采用前端针对开发和生产环境分别打包并生成zip文件（存放在git中）交由后端开发人员部署。 需用到以下工具： node packages：cross-env webpack plugins: webpack.definePlugin/zip-webpack-plugin 当然可以采用jenkins优化发布过程。可以参见《Jenkins+Github持续集成》","link":"/2018/06/25/前端规范/"}],"tags":[{"name":"Parcel","slug":"Parcel","link":"/tags/Parcel/"},{"name":"Bundler","slug":"Bundler","link":"/tags/Bundler/"},{"name":"前端自动化","slug":"前端自动化","link":"/tags/前端自动化/"},{"name":"前端构建","slug":"前端构建","link":"/tags/前端构建/"},{"name":"前端部署","slug":"前端部署","link":"/tags/前端部署/"},{"name":"Webpack","slug":"Webpack","link":"/tags/Webpack/"},{"name":"兼容性","slug":"兼容性","link":"/tags/兼容性/"},{"name":"Bug","slug":"Bug","link":"/tags/Bug/"},{"name":"JavaScript","slug":"JavaScript","link":"/tags/JavaScript/"},{"name":"Html","slug":"Html","link":"/tags/Html/"},{"name":"prototype","slug":"prototype","link":"/tags/prototype/"},{"name":"原型","slug":"原型","link":"/tags/原型/"},{"name":"原型链","slug":"原型链","link":"/tags/原型链/"},{"name":"规范","slug":"规范","link":"/tags/规范/"},{"name":"代码规范","slug":"代码规范","link":"/tags/代码规范/"},{"name":"打包","slug":"打包","link":"/tags/打包/"},{"name":"发布","slug":"发布","link":"/tags/发布/"}],"categories":[{"name":"CI","slug":"CI","link":"/categories/CI/"},{"name":"前端开发","slug":"前端开发","link":"/categories/前端开发/"}]}